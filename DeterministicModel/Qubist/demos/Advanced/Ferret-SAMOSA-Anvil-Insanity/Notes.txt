Ferret-SAMOSA-Anvil Insanity
=============

This is a somewhat contrived example that demonstrates an advanced technique for
calling SAMOSA or Anvil  to handle an optimization sub-problem from inside of Ferret's
fitness function.  SAMOSA is the better choice for this because it usually requires fewer
evaluations that Anvil and runs faster.  

*** This demo also works with Locust. ***

The basic steps are as follows:

1. Write a single init file that contains everything.  You should define extPar_ as a global variable, and
you do not need to return extPar from the init function:

function init
global extPar_


2. Write separate fitness functions for Ferret and for the internal optimization problem.  Give these
good names to avoid confusion.  The demo uses fitnessFerret and fitnessInternal for the Ferret fitness
function and the fitness function for the internal optimization problem respectively.


3. Create a separate FerretSetup and a setup file for the internal optimization: either SAMOSA_setup 
to use SAMOSA, or AnvilSetup to use Anvil.  The FerretSetup file must call call the SAMOSA_setup file
by the following steps:

% @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
% @  EXTRA SETUP INFO FOR SAMOSA AND Anvil
% @ All extra setup info MUST go into par.user if you want 
% @ this demo to also work with Locust.  par.user is copied
% @ into LocustSetup verbatim by the translation program
% @ translateFerretToLocust.  Other user-defined fields are
% @ not copied.             
% @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
%
% !!!!! ADD SETUP INFO FOR SAMOSA. !!!!!
% This info is required for the SAMOSA call that is embedded in Ferret's
% fitness function.
%
% Load an INCOMPLETE default setup file from
% Qubist/user/Ferret/defaults/defaultSAMOSA_setup.
par.user.SAMOSA_par=defaultSAMOSA_setup;
%
% Add remaining fields by translating Ferret --> SAMOSA.
par.user.SAMOSA_par=translateFerretToSAMOSA(par, par.user.SAMOSA_par);
%
% The translation program will use Ferret's setup file (specifically the
% par.general.min and max fields) to determine par.general.X0, and this
% will be wrong for SAMOSA.  Destroy the X0 field and let SAMOSA sort it
% out for itself.
par.user.SAMOSA_par.general.X0=[];
%
% Add modified fields from SAMOSA_setup.
par.user.SAMOSA_par=SAMOSA_setup(par.user.SAMOSA_par);
%
% ====================================
% !!!!! ADD SETUP INFO FOR Anvil. !!!!!
% This info is required for the Anvil call that is embedded in Ferret's
% fitness function.
%
% Load an INCOMPLETE default setup file from
% Qubist/user/Ferret/defaults/defaultAnvilSetup.
par.user.AnvilPar=defaultAnvilSetup;
%
% Add remaining fields by translating Ferret --> Anvil.
par.user.AnvilPar=translateFerretToAnvil(par, par.user.AnvilPar);
%
% Add modified fields from AnvilSetup.
par.user.AnvilPar=AnvilSetup(par.user.AnvilPar);
%
% ====================================

4. Remember to turn off graphics in the SAMOSA_setup and AnvilSetup files
(par.interface.graphics=false).  Also remember to give the names of the two fitness
functions:

In FerretSetup: par.user.fitnessFcn='fitnessFerret';
In SAMOSA_setup: par.user.fitnessFcn='fitnessSAMOSA';
In Anvil_setup: par.user.fitnessFcn='fitnessAnvil'


5. The par structure for SAMOSA and Anvil are available from within Ferret's fitness
function as extPar.QubistPar.user.SAMOSA_par and extPar.QubistPar.user.AnvilPar


6. From within the Ferret fitness function, you can call SAMOSA or Anvil by:

OptimalSolutionsInternal=internalOptimizer(extPar.QubistPar.user.SAMOSA_par);
OptimalSolutionsInternal=internalOptimizer(extPar.QubistPar.user.AnvilPar);


7. Extract a single parameter set or fitness value by doing the following:

X_SAMOSA=OptimalSolutionsInternal.X(:,1);
F_SAMOSA=OptimalSolutionsInternal.F(:,1);


8. Use these values from within the Ferret fitness function as you wish!