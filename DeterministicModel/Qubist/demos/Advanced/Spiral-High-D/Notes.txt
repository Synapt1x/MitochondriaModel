Extreme Niching and Avoidance of Local Minima: Mapping a Spiral:
===============================================================

This is a very difficult test problem that was described in the first paper that
used Ferret for a research problem in astrophysics:

Fiege, Jason D.; Johnstone, Doug; Redman, Russell O.; Feldman, Paul A., 2004,
"A Genetic Algorithm-based Exploration of Three Filament Models: A Case for 
the Magnetic Support of the G11.11-0.12 Infrared-dark Cloud", Astrophysical
Journal, 616, 925.

The example searches a high-dimensional parameter space for a complicated solution set
represented by a 2-dimensional spiral valley modulated by an 18 dimensional 
discontinuous function with numerous local minima.  The goal is to map out this spiral
completely, while avoiding approximately 9.4 x 10^23 local minima distributed
throughout the space.  Any of these local minima is a "false solution" that could
fool many other optimizers.  The problem is especially tricky because all of the
functions employed are discontinuous: the gradient is zero everywhere, except for
at a finite number of discontinuities.  Any gradient-based solver will fail on this
problem.

Note that this is an example of a "class-finding" problem that uses the full-blown
machinery of a multi-objective genetic algorithm (niching, etc.) on a problem with
a single objective.  Class-finding problems are characterized by a single objective
function with a flat-bottomed valley where a class of optimal solutions resides.

***This problem also gives an example of a custom user output function.  To try this
feature, uncomment the line "par.user.output='output'" in the setup file.  The user
function coded in output.m is an example of a user-coded termination criterion.  To stop 
Ferret at the next generation, all that is required is to set a GLOBAL variable called 
'abort_' equal to 1: 'abort_=1'.  Here, the stop criterion is particularly simple; it
just stops after the 10th generation.  However, the function 'user' accepts 'world' as 
an argument.  The 'world' data structure contains ALL information about the current 
population, so it is possible to design a custom termination criterion based on the 
parameter distribution, population statistics, or fitness values.  This way, the 
termination behaviour is *entirely* up to the user.  Custom output functions can also
be used for used to display data on the screen or to make plots based the current
generation.  Note, however, that the user can also display custom graphics using the 
'par.interface.myPlot' option.
