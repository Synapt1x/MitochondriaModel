Interfacing Ferret to a Fitness function written in C:  Modeling Data:
=============

THIS DEMO SHOWS HOW TO USE A FITNESS FUNCTION WRITTEN IN C WITH FERRET.
THE DEMO IS THE SAME AS "DATA-MODELER", WHICH IS WRITTEN USING M-FILES ONLY.

The C code is written in file mxDemo.c.  Note that this cannot be called directly by Ferret,
but must be embedded in an m-file "wrapper", which is named (arbitrarily) as
"CFitnessWrapper.m".  The reason for doing this is that Ferret calls "nargout" on the fitness
function to determine the number of output values.  Mex files do not return this information,
so the C-code must be embedded in an m-file wrapper to supply this information.  Note that
this is a "barebones" example only, and the C code does no validation.  Matlab allows C
developers to validate both the input arguments and output values of their C programs.  See
the "External Interfaces" documentation on Matlab for details.

The "fitness.m" file is included to test the see code by running "testFitness.m".  It is also called
by the User Plot in the Ferret Console window to show that C code really is consistent with 
the C mex version.

=============
This example shows how Ferret can be used to do multi-parameter fits to data.
The "fakeData.m" program makes a fake, noisy data set, which we try to fit.
The data produced by fakeData.m could be replaced with real data.

SPECIAL TECHNIQUE FOR RESUMING RUNS:

The fake data set is generated randomly, and the the resumed run will be using
entirely different data!  If you want to resume this run, you MUST re-select
the demo and tell Ferret to SKIP loading the init file.  This will cause Ferret
to use the fake data set already encoded in the extPar structure saved with the
previously generated History files.